using Microsoft.Extensions.Configuration;
using Microsoft.WindowsAzure.Storage.Auth;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration.Binder;
using Microsoft.WindowsAzure.Storage.Blob;
using System.IO;

namespace ExampleGov.BlobMalwareScan
{
    public class BlobStorage
    {
        private CloudBlobContainer CloudBlobContainer;
        public BlobStorage(string blobSaS, string container)
        {
            if (string.IsNullOrWhiteSpace(blobSaS)) {
                throw new ArgumentException("blobSaS IsNullOrWhiteSpace");
            }
            if (string.IsNullOrWhiteSpace(container)) {
                throw new ArgumentException("container IsNullOrWhiteSpace");
            }

            var storageCredentials = new StorageCredentials(blobSaS);
            var containerUri = new Uri(container);
            var cloudBlobContainer = new CloudBlobContainer(containerUri, storageCredentials);
            this.CloudBlobContainer = cloudBlobContainer;

            //TODO: further verify container exists and credentials are valid
        }
        public CloudBlockBlob GetBlockBlobReference(string fileName) {
            return CloudBlobContainer.GetBlockBlobReference(fileName);
        }

        public async Task<Uri> UploadToBlobAsync(System.IO.Stream file, string fileName)
        {
            var blob = CloudBlobContainer.GetBlockBlobReference(fileName);
            await blob.UploadFromStreamAsync(file);

            return blob.Uri;
        }
        public Task<Stream> DownloadDAAsync(string fileName)
        {
            var blob = CloudBlobContainer.GetBlockBlobReference(fileName);
            return blob.OpenReadAsync();
        }
        public async Task<string> StartCopyAsyncToContainer(CloudBlockBlob sourceBlob) {
            var destBlob = CloudBlobContainer.GetBlockBlobReference(sourceBlob.Name);
            return await destBlob.StartCopyAsync(sourceBlob);
        }
        /// <summary>
        /// Delete blob and snapshots
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public async Task DeleteBlob(string fileName) {
            var blob = GetBlockBlobReference(fileName);
            await blob.DeleteIfExistsAsync(DeleteSnapshotsOption.IncludeSnapshots, null, null, null);
        }
    }
}
